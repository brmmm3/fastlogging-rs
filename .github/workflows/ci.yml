on: [push, pull_request]

name: Continuous Integration

jobs:

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -A clippy::unnecessary_wraps

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]

    env:
      CIBW_BUILD_VERBOSITY: 1
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y && yum install -y openssl-devel"
      CIBW_SKIP: "cp27-* cp34-* cp35-* cp36-* pp* *-win32 *-pypy* *-musllinux*"
      # Build separate wheels for macOS's different architectures.
      CIBW_ARCHS_MACOS: "x86_64"
      # Build only on Linux architectures that don't need qemu emulation.
      CIBW_ARCHS_LINUX: "x86_64"
      # Run the test suite after each build.
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_TEST_REQUIRES: "pytest"
      CIBW_TEST_COMMAND: pytest {package}/tests

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - if: runner.os == 'Windows'
        run: |
            echo 'PATH=/c/Python38:/c/Python38/Scripts:$PATH' >> $GITHUB_ENV
            echo 'RUSTFLAGS=-Ctarget-feature=+crt-static' >> $GITHUB_ENV
            echo 'RUSTFLAGS=-Ctarget-feature=+crt-static' >> $GITHUB_ENV
            echo 'CIBW_BEFORE_BUILD=python -m pip install --upgrade pip' >> $GITHUB_ENV

      - if: runner.os != 'Linux'
        name: Setup env when not using docker
        run: |
          python -m pip install --upgrade wheel setuptools

      - uses: PyO3/maturin-action@v1
        with:
          working-directory: ./pyfastlogging
          command: build
          args: --release

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: pip
          cache-dependency-path: ".github/workflows/wheels.yml"

      - name: Install dependencies
        run: |
          python -m pip install cibuildwheel
          python -m pip install -U twine

      - name: Build wheels
        run: |
          cd pyfastlogging
          maturin build --sdist --interpreter
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload as build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: target/wheels/*.whl
          if-no-files-found: error

      - name: Publish package to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
        run: |
          twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing target/wheels/*

  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      GOFLAGS: -mod=vendor
      GOPROXY: "off"

    steps:

    - name: Set up Go 1.22.3
      uses: actions/setup-go@v2
      with:
        go-version: 1.22.3
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Format
      run: make lint

    - name: Vet
      run: make vet

    - name: Test
      run: make test

    - name: Build
      run: make build
